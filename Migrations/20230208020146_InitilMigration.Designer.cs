// <auto-generated />
using System;
using CabFinder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CabFinder.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230208020146_InitilMigration")]
    partial class InitilMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CabFinder.Entities.Location", b =>
                {
                    b.Property<int>("location_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("location_id"));

                    b.Property<double>("destination_coord_lat")
                        .HasColumnType("double precision");

                    b.Property<double>("destination_coord_long")
                        .HasColumnType("double precision");

                    b.Property<string>("location_description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("start_coord_lat")
                        .HasColumnType("double precision");

                    b.Property<double>("start_coord_long")
                        .HasColumnType("double precision");

                    b.HasKey("location_id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CabFinder.Entities.Ride", b =>
                {
                    b.Property<int>("ride_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ride_id"));

                    b.Property<DateTime>("estimated_arrival_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("location_id")
                        .HasColumnType("integer");

                    b.Property<int>("rideservice_id")
                        .HasColumnType("integer");

                    b.HasKey("ride_id");

                    b.HasIndex("location_id");

                    b.HasIndex("rideservice_id");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("CabFinder.Entities.RideService", b =>
                {
                    b.Property<int>("rideservice_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("rideservice_id"));

                    b.Property<double>("priceperkm")
                        .HasColumnType("double precision");

                    b.Property<string>("rideservice_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("rideservice_id");

                    b.ToTable("RideServices");
                });

            modelBuilder.Entity("CabFinder.Entities.Ride", b =>
                {
                    b.HasOne("CabFinder.Entities.Location", "location")
                        .WithMany()
                        .HasForeignKey("location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CabFinder.Entities.RideService", "rideservice")
                        .WithMany()
                        .HasForeignKey("rideservice_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");

                    b.Navigation("rideservice");
                });
#pragma warning restore 612, 618
        }
    }
}
